// Define web component
(function () {
  class FeedbackTestWidgetOne extends HTMLElement {
    constructor() {
      super();
      this.qualtricsProjectId = ""; // Initialize Qualtrics Project ID
    }

    connectedCallback() {
      this.innerHTML = `
      <div id="in-app-feedback-embed"></div>
      <div>
        <label for="qualtricsProjectId">Qualtrics Project ID:</label>
        <input type="text" id="qualtricsProjectId" value="${this.qualtricsProjectId}" />
        <button id="updateQualtricsProjectId">Update Qualtrics Project ID</button>
      </div>
      <style>
        // ... CSS styles for the widget ...
      </style>
    `;
      // Add event listener for updating Qualtrics Project ID
      document
        .getElementById("updateQualtricsProjectId")
        .addEventListener("click", () => {
          this.qualtricsProjectId =
            document.getElementById("qualtricsProjectId").value;
          this.setupQualtrics(); // Reload Qualtrics with the new Project ID
        });

      // Make sure Qualtrics is loaded, because for the first time the general Qualtrics code will actually be loaded later. In that case, reloading it is not necessary, since the initial load took care of the embedded feedback
      if (window.hasOwnProperty("QSI")) {
        QSI.API.unload();
        QSI.API.load({
          // Use the dynamic Qualtrics Project ID
          project: this.qualtricsProjectId || "defaultProjectId",
        });
        QSI.API.run();
      }
    }

    setupQualtrics() {
      // Make sure Qualtrics is loaded
      if (window.hasOwnProperty("QSI")) {
        QSI.API.unload();
        QSI.API.load({
          // Use the dynamic Qualtrics Project ID
          project: this.qualtricsProjectId || "defaultProjectId",
        });
        QSI.API.run();
      }
    }
  }

  customElements.define("feedback-test-widget-one-1", FeedbackTestWidgetOne);
})();

// Global object with functions that retrieve embedded data
InAppFeedback = {
  getSACPageName: () => {
    let pageTab = document.querySelector(
      ".sapEpmUiTabContainerPageTab.selected .sapEpmUiTabContainerTabTitle"
    )?.innerText;
    let pageSelect = document.querySelector(
      ".sapEpmToolbarPageBrowserControl .sapMSelectListItemText"
    )?.innerText;
    return pageTab ?? pageSelect ?? "unknown page";
  },
  getSACStoryName: () =>
    /(.+) - Storys - SAP Analytics Cloud/.exec(document.title)?.[1] ??
    "unknown story name",
  getSACStoryID: () =>
    /\/([A-Z0-9]{32})\//.exec(document.location.href)?.[1] ??
    "unknown story id",
};

// General Qualtrics code
(function () {
  var g = function (e, h, f, g) {
    this.get = function (a) {
      for (
        var a = a + "=", c = document.cookie.split(";"), b = 0, e = c.length;
        b < e;
        b++
      ) {
        for (var d = c[b]; " " == d.charAt(0); ) d = d.substring(1, d.length);
        if (0 == d.indexOf(a)) return d.substring(a.length, d.length);
      }
      return null;
    };

    this.set = function (a, c) {
      var b = "",
        b = new Date();
      b.setTime(b.getTime() + 6048e5);
      b = "; expires=" + b.toGMTString();
      document.cookie = a + "=" + c + b + "; path=/; ";
    };

    this.check = function () {
      var a = this.get(f);
      if (a) a = a.split(":");
      else if (100 != e)
        "v" == h && (e = Math.random() >= e / 100 ? 0 : 100),
          (a = [h, e, 0]),
          this.set(f, a.join(":"));
      else return !0;
      var c = a[1];
      if (100 == c) return !0;
      switch (a[0]) {
        case "v":
          return !1;
        case "r":
          return (
            (c = a[2] % Math.floor(100 / c)),
            a[2]++,
            this.set(f, a.join(":")),
            !c
          );
      }
      return !0;
    };

    this.go = function () {
      if (this.check()) {
        var a = document.createElement("script");
        a.type = "text/javascript";
        a.src = g;
        document.body && document.body.appendChild(a);
      }
    };

    this.start = function () {
      var t = this;
      "complete" !== document.readyState
        ? window.addEventListener
          ? window.addEventListener(
              "load",
              function () {
                t.go();
              },
              !1
            )
          : window.attachEvent &&
            window.attachEvent("onload", function () {
              t.go();
            })
        : t.go();
    };
  };

  try {
    new g(
      100,
      "r",
      "QSI_S_ZN_9U2HkXOMQCovLjU",
      "https://zn9u2hkxomqcovlju-bmwux.siteintercept.qualtrics.com/SIE/?Q_ZID=ZN_9U2HkXOMQCovLjU"
    ).start();
  } catch (i) {}
})();
